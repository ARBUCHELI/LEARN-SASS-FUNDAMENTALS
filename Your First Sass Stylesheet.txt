# YOUR FIRST SASS STYLESHEET
----------------------------

* Why Sass?
-----------
Sass, or Syntactically Awesome Style Sheets, is an extension language for CSS. With Sass, you can write clean, sustainable CSS code and solve the common repetition and maintenance 
challenges present in traditional CSS.

In addition to being a valuable skill for any front-end developer, transitioning from CSS to Sass is pretty smooth due to the familiar syntax. For this reason, we will be learning the 
SCSS (Sassy CSS) syntax.

If you are new to HTML and CSS, we recommend you take our Learn HTML and Learn CSS courses first.

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Compiling Sass
----------------
Sass can’t be directly interpreted by your browser, so it must first be converted, or compiled, to CSS before the browser can directly understand it.

Compiling refers to converting code to lower level code so that it can be executed. By compiling SCSS to CSS, it can be interpreted by your browser and the results will appear on a 
webpage.

Before we dive into writing Sass, let’s first learn how to compile it to CSS by typing the following command in the terminal and pressing enter:

	sass main.scss main.css

The sass command above takes in two arguments:

	1. The input (main.scss)
	2. The location of where to place that output (main.css)

Make sure to look closely at the extensions of each file in the command above.

* Instructions
--------------
Checkpoint 1 Passed
1.
In the terminal, compile the SCSS to CSS by typing the following command and hitting Enter on your keyboard:

	sass main.scss main.css

Compare the output in main.css to the input in main.scss.

Checkpoint 2 Passed
2.
From this point on, any Sass code you write will be auto-compiled anytime you click the “Run” button. This will allow us to focus strictly on writing code.

Even though you won’t be compiling the code manually everytime you write Sass in this course, be aware that it’s happening for you in the background.

main.scss
---------
@import url(https://fonts.googleapis.com/css?family=Pacifico);
//Add variables here:

h1 {
  font-family: Roboto, sans-serif;
  text-align: center;
}

.banner {
  font-family: 'Pacifico', cursive;
  height: 400px;
  background-image: url("lemonade.jpg");
}

.container {
  text-align: center;
  font-family: 'Pacifico', cursive;
}

main.css
--------
@import url(https://fonts.googleapis.com/css?family=Pacifico);
h1 {
  font-family: Roboto, sans-serif;
  text-align: center; }

.banner {
  font-family: 'Pacifico', cursive;
  height: 400px;
  background-image: url("lemonade.jpg"); }

.container {
  text-align: center;
  font-family: 'Pacifico', cursive; }

/*# sourceMappingURL=main.css.map */

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Sass: Overview
----------------
Let’s get started! Sass has many perks that enable us to write succinct, readable code. In this lesson we will explore three concepts:

	. Variables
	. Mixins
	. Nests

In the process, you’ll use Sass to style your very own website for a lemonade stand.

* Instructions
--------------
Take a look at the Sass code in main.scss and compare it to the CSS equivalent in main.css. What differences do you notice?

Hint: Both versions produce the same effects!

We will be editing these files to style the website appropriately.

index.html
----------
<link rel="stylesheet" type="text/css" href="main.css">

<h1>LEMONADE</h1>

<div class="banner">
  <div class="slogan">
    <span>
      homemade with fresh ingredients
    </span>
  </div>  
</div>
  
<div class="container">
  <div class="icon">
    fresh lemons
    <img src="lemon.png">
  </div>
  <div class="icon">
    real sugar
    <img src="lemon.png">
  </div>
  <div class="icon">
    dad's recipe
    <img src="lemon.png">
  </div>
</div>  


main.css
--------
@import url(https://fonts.googleapis.com/css?family=Pacifico);
h1 {
  font-family: Roboto, sans-serif;
  text-align: center;
}

.banner {
  font-family: 'Pacifico', cursive;
  height: 400px;
  background-image: url("lemonade.jpg");
}

.container {
  text-align: center;
  font-family: 'Pacifico', cursive;
}

main.scss
---------
@import url(https://fonts.googleapis.com/css?family=Pacifico);
//Add variables here:

h1 {
  font-family: Roboto, sans-serif;
  text-align: center;
}

.banner {
  font-family: 'Pacifico', cursive;
  height: 400px;
  background-image: url("lemonade.jpg");
}

.container {
  text-align: center;
  font-family: 'Pacifico', cursive;
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Nesting Selectors
-------------------
The first Sass construct we will learn about is nesting.

Nesting is the process of placing selectors inside the scope of another selector:

	. In programming, a variable’s scope is the context in which a variable is defined and available to use.

	. In Sass, it’s helpful to think of the scope of a selector as any of the code between its opening { and closing } curly brackets.

	. Selectors that are nested inside the scope of another selector are referred to as children. The former selector is referred to as the parent. This is just like the relationship 
	observed in HTML elements.

.parent {
  color: blue;
  .child {
    font-size: 12px;
  }
}

In the example above .child is the child selector and .parent is the parent selector.

The above SCSS would compile to the following, equivalent CSS:

.parent {
  color: blue;
}

.parent .child {
    font-size: 12px;
}

Nesting allows you to see the clear DOM relationship between two selectors while also removing the repetition observed in CSS.

* Instructions
--------------
Checkpoint 1 Passed
1.
In main.scss, inside of the .banner class selector, nest the following:

.slogan {
  position: absolute;
  border: 4px solid black;
  top: 200px;
  left: 25%;
  width: 50%;
  height: 200px;
  text-align: center;
}

Click “Run” to see your changes in the browser and inspect the output in main.css.

See how much more clear and efficient nesting is? With Sass, you can avoid repeating the parent over and over again and also avoid definining each selector independently.

Checkpoint 2 Passed
2.
In main.scss, nest in the following span selector inside of .slogan:

span {
  font-size: 24px;
  line-height: 200px;
}

Click “Run” to see your changes in the browser and inspect the output in main.css.

Checkpoint 3 Passed
3.
Practice makes perfect! In main.scss, nest the following selector inside of .container:

.icon {
  display: inline-block;
  margin: 2%;
  border: 4px solid black;
  font-size: 32px;
}

Click “Run” to see your changes in the browser and inspect output in main.css.

index.html
----------
<link rel="stylesheet" type="text/css" href="main.css">

<h1>LEMONADE</h1>

<div class="banner">
  <div class="slogan">
    <span>
      homemade with fresh ingredients
    </span>
  </div>  
</div>
  
<div class="container">
  <div class="icon">
    fresh lemons
    <img src="lemon.png">
  </div>
  <div class="icon">
    real sugar
    <img src="lemon.png">
  </div>
  <div class="icon">
    dad's recipe
    <img src="lemon.png">
  </div>
</div>  

main.css
--------
@import url(https://fonts.googleapis.com/css?family=Pacifico);
h1 {
  font-family: Roboto, sans-serif;
  text-align: center;
}

.banner {
  font-family: 'Pacifico', cursive;
  height: 400px;
  background-image: url("lemonade.jpg");
}

.banner .slogan {
  position: absolute;
  border: 4px solid black;
  top: 200px;
  left: 25%;
  width: 50%;
  height: 200px;
  text-align: center;
}

.banner .slogan span {
  font-size: 24px;
  line-height: 200px;
}

.container {
  text-align: center;
  font-family: 'Pacifico', cursive;
}

.container .icon {
  display: inline-block;
  margin: 2%;
  border: 4px solid black;
  font-size: 32px;
}

main.scss
---------
@import url(https://fonts.googleapis.com/css?family=Pacifico);
//Add variables here:

h1 {
  font-family: Roboto, sans-serif;
  text-align: center;
}

.banner {
  font-family: 'Pacifico', cursive;
  height: 400px;
  background-image: url("lemonade.jpg");

  .slogan {
  position: absolute;
  border: 4px solid black;
  top: 200px;
  left: 25%;
  width: 50%;
  height: 200px;
  text-align: center;

span {
  font-size: 24px;
  line-height: 200px;
}  
}
}

.container {
  text-align: center;
  font-family: 'Pacifico', cursive;

  .icon {
  display: inline-block;
  margin: 2%;
  border: 4px solid black;
  font-size: 32px;
}
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

Nesting Properties
Congrats, you’ve written your first nested selectors!

In SCSS, nesting is not limited only to selectors. You can also nest common CSS properties if you append a : colon suffix after the name of the property.

For example, the following SCSS code:

.parent {
  font : {
    family: Roboto, sans-serif;
    size: 12px;
    decoration: none;
  }
}

will compile to the following CSS:

.parent {
 font-family: Roboto, sans-serif;
 font-size: 12px;
 font-decoration: none;
}

* Instructions
--------------
Checkpoint 1 Passed
1.
In main.scss, nest the following properties inside of .banner:

border : {
    top: 4px solid black;
    bottom: 4px solid black;
}

Click “Run” to see your changes in the browser and view the output in main.css.

index.html
----------
<link rel="stylesheet" type="text/css" href="main.css">

<h1>LEMONADE</h1>

<div class="banner">
  <div class="slogan">
    <span>
      homemade with fresh ingredients
    </span>
  </div>  
</div>
  
<div class="container">
  <div class="icon">
    fresh lemons
    <img src="lemon.png">
  </div>
  <div class="icon">
    real sugar
    <img src="lemon.png">
  </div>
  <div class="icon">
    dad's recipe
    <img src="lemon.png">
  </div>
</div>  

main.scss
---------
@import url(https://fonts.googleapis.com/css?family=Pacifico);
//Add variables here:

h1 {
  font-family: Roboto, sans-serif;
  text-align: center;
}

.banner {
  font-family: 'Pacifico', cursive;
  height: 400px;
  background-image: url("lemonade.jpg");

  border : {
    top: 4px solid black;
    bottom: 4px solid black;
  }

  .slogan {
  position: absolute;
  border: 4px solid black;
  top: 200px;
  left: 25%;
  width: 50%;
  height: 200px;
  text-align: center;

span {
  font-size: 24px;
  line-height: 200px;
}  
}
}

.container {
  text-align: center;
  font-family: 'Pacifico', cursive;

  .icon {
  display: inline-block;
  margin: 2%;
  border: 4px solid black;
  font-size: 32px;
}
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------












































































